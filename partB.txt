[Part B Directions]: (15 Points) Define production rules for implementing the mathematical syntax of
operators and operands, loops, variable declaration, selection statements
• Enforce a non PEMDAS (BODMAS) order of operation, must have at least
6 levels of precedence
• Keywords cannot use the words while, for, do, if, int, short, long
i. Keywords should be unique, if others share your same words, you
may lose more points than this problem is worth
• You must clearly state the structure of your language with production
rules



#poi = stmt
#loop = cir 
#when = if
#con = while
#digit = int



<start> --> <poi>

<poi> --> <when> ';' | <con> ';' | <as_> ';' | <block> ';'

<block> --> `(` { <poi> `;` } `)`

<when> -->  `when``(`<bool_Expr>`)` <poi> [ `else` <poi> ]

<con> -->  `con``(`<bool_expr>`)` <poi> 

<as_>  --> `iden` `=` <expr>



<expr> --> <term> { (`+`|`-`) <term> }

<term> --> <factor> { (`*`|`\`|`%`) <factor> | <factor> --> `iden` | `int_lit` | `bool_lit` | `(` <bexpr> `)`}

<factor> --> `iden` | `int_lit` | `bool_lit` | `(` <bexpr> `)`


<bool_expr> --> <band> { `OR` <band> }

<band> --> <beq> { `AND` <beq> }

<beq> --> <brel> { (`!=`|`==`) <brel> }

<brel> --> <expr> { (`<=`|`>=` | `<` | `>`) <expr> }

<expr> --> <term> { (`+`|`-`) <term> }

<term> --> <not> { (`*`|`\`|`%`) <bnot> }

<not> -> [!]<bfactor>
